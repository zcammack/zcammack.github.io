---
layout: post
title:      "Difficulty with Rails"
date:       2020-11-28 12:14:26 +0000
permalink:  difficulty_with_rails
---


Rails has been something of a beast for me to deal with in these past few weeks. The majority of what I've learned is that Rails is a very magical gem! It does a -lot- of functions for you on its own... but it's also easy to overwhelm yourself with the various errors and issues that can arise from trying to use magic. 

The first problem I ran into was learning how to deal with modeling structure. I actually ended up recreating my project multiple times as I tried to figure out the best way to handle a relationship between models. At first I wanted to create a card capture like program that would let users build decks using existing cards from a popular game. This proved to be difficult... and eventually I gave up on the idea after I could not get the models to play nice with one another. I went through idea after idea before finally settling on a very simple campaign manager. It was a mistake to do this. After finishing my project and having a much firmer understanding of how the relationships between models function, it would not have been such a difficult task. It wasn't that the models couldn't work with one another, but that I didn't understand how models would function in conjunction with a view for the user. I wasted valuable time trying to accomplish everything within the project all at once instead of focusing on specific items of interest at a time.

After finally deciding how I would have my models function (and the decision to use only a few) I started to work on how I could create my models as belonging to a user. My users were created using Devise, which provided lots of useful tools to ensure that I could separate information between users. After all, I didn't want users editing each others information. The current_user and authenticate_user! methods in particular came in very handy. I settled on simply calling the authenticate_user! method before every single action, which proved to work well with ensuring users only modified their own personal data. I spent a good bit of time here working on authentication and understanding how Devise and Omniauth would work together, and integrated a facebook sign in that worked quite well. Of all the things in my project, I'm most happy with how this turned out.

After that, I moved on to creating controllers. I originally thought it'd be best to create my controllers in a similar fashion. That is, that I create my controllers to all look the same. I quickly learned this wasn't going to work, especially with nested routes and resources. With my controllers only somewhat functioning, I decided maybe it would be better if I focused on finishing out my views and then moving back to the controllers to fix the routing issues that constantly popped up. This only worked somewhat... though I was able to create decent looking views. I learned how to create a navigation bar, which I wanted to add on to but ran out of time. The navigation bar in particular felt nice to me. Having a layout source that would be present on every page for the user to navigate just felt right to me in its construction.

This is where I spent most of my time... changing my controllers and views along with routing through the program constantly. I adjusted my routes to try and appease the problems that kept popping up in the way. The individual concepts that I had learned about worked just fine... the issue was trying to make them work in conjunction with one another. A nested resource that used a nested form in particular was difficult to understand. So many sources still use form_for when describing how to create a functional view page, but I wanted to use form_with as it's the newest creation tool. It was generally the same idea, but syntax kept tripping me up and caused me to spend hours trying to understand why something was broken... only to be missing a parameter somewhere or poorly structuring my methods.

For a short while, I had felt like I should just give up. That in solving one error, more simply appeared. I didn't seek out help either... feeling that I had to do it all on my own. It wasn't a very pleasant experience. But eventually, things started to make more sense gradually. I began to understand what my form was actually doing when it was being submitted through strong params. Why certain routes had to be name-spaced specifically for nested routes. And how I was generally overcomplicating everything.

Finally, I came to a finish line. My program worked as intended... it saved information as I wanted and gave a simple interface for the user to manipulate their information. I learned a lot during this project... though I know I have much more to understand.
